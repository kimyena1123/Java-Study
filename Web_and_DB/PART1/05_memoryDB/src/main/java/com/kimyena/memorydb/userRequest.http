
### create - 성공하면 id 값이 생겨서, id : 1
PUT http://localhost:8080/api/user
Content-Type: application/json

{
  "name": "홍길동",
  "score": 100
}

### create - 성공하면 id 값이 생겨서, id : 2
PUT http://localhost:8080/api/user
Content-Type: application/json

{
  "name": "나길동",
  "score": 99
}

### create - 성공하면 id 값이 생겨서, id : 3
PUT http://localhost:8080/api/user
Content-Type: application/json

{
  "name": "박박박",
  "score": 20
}

### create - 성공하면 id 값이 생겨서, id : 4
PUT http://localhost:8080/api/user
Content-Type: application/json

{
"name": "김김김",
"score": 40
}


### read - findall
GET http://localhost:8080/api/user/all
### 아래와 같이 나온다.
#[
#{
#    "id": 1,
#    "name": "홍길동",
#    "score": 100
#  },
#  {
#    "id": 2,
#"name": "나길동",
#"score": 99
#}
#]

### read - 한개의 정보만
GET http://localhost:8080/api/user/read/id/2

### update
PUT http://localhost:8080/api/user
Content-Type: application/json

{
  "id": 2,
  "name": "나길동",
  "score": 100
}

### delete
DELETE http://localhost:8080/api/user/delete/id/3


### 매개변수의 점수보다 같거나 큰 경우의 정보를 리턴 - RequestParam 사용
GET http://localhost:8080/api/user/greater-then/score?score=70

### 특정 점수보다는 크고, 특정 점수보다는 작은 - RequestParam 사용
GET http://localhost:8080/api/user/min_max?min=30&max=90

### 쿼리 메서드가 아닌 @Query로 sql 문법사용해보기. 기능은 위 메서드와 똑같음
GET http://localhost:8080/api/user/min_max2?min=30&max=90

### 쿼리 메서드도, jpql 문법도 아닌 sql(native sql)으로 접근해보기. 기능은 위 메서드와 똑같음
GET http://localhost:8080/api/user/native_sql?min=30&max=90

### 쿼리 메서드도, jpql 문법도 아닌 sql(native sql)으로 접근해보기. 쿼리문에서 ? 대신 별명으로 대체하기
GET http://localhost:8080/api/user/native_sql2?min=30&max=90




